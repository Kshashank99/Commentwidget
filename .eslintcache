[{"C:\\Users\\HP\\Desktop\\Comment-app\\Commentwidget\\src\\index.js":"1","C:\\Users\\HP\\Desktop\\Comment-app\\Commentwidget\\src\\App.js":"2","C:\\Users\\HP\\Desktop\\Comment-app\\Commentwidget\\src\\comments\\Comments.js":"3","C:\\Users\\HP\\Desktop\\Comment-app\\Commentwidget\\src\\api.js":"4","C:\\Users\\HP\\Desktop\\Comment-app\\Commentwidget\\src\\comments\\Comment.js":"5","C:\\Users\\HP\\Desktop\\Comment-app\\Commentwidget\\src\\comments\\CommentForm.js":"6"},{"size":1395,"mtime":1636005549710,"results":"7","hashOfConfig":"8"},{"size":257,"mtime":1636133138927,"results":"9","hashOfConfig":"8"},{"size":4116,"mtime":1636135522267,"results":"10","hashOfConfig":"8"},{"size":440,"mtime":1636125120165,"results":"11","hashOfConfig":"8"},{"size":3871,"mtime":1636123990610,"results":"12","hashOfConfig":"8"},{"size":877,"mtime":1636133138931,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"129c3ac",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\HP\\Desktop\\Comment-app\\Commentwidget\\src\\index.js",["28"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { useState } from \"react\";\n// const App = () => {\n// \tconst [name, setName] = useState(\"\");\n// \tconst [pwd, setPwd] = useState(\"\");\n\n// \tconst handle = () => {\n// \t\tlocalStorage.setItem(\"Name\", name);\n// \t\tlocalStorage.setItem(\"Password\", pwd);\n// \t};\n// \tconst remove = () => {\n// \t\tlocalStorage.removeItem(\"Name\");\n// \t\tlocalStorage.removeItem(\"Password\");\n// \t};\n// \treturn (\n// \t\t<div className='App'>\n// \t\t\t<h1>Name of the user:</h1>\n// \t\t\t<input\n// \t\t\t\tplaceholder='Name'\n// \t\t\t\tvalue={name}\n// \t\t\t\tonChange={(e) => setName(e.target.value)}\n// \t\t\t/>\n// \t\t\t<h1>Password of the user:</h1>\n// \t\t\t<input\n// \t\t\t\ttype='password'\n// \t\t\t\tplaceholder='Password'\n// \t\t\t\tvalue={pwd}\n// \t\t\t\tonChange={(e) => setPwd(e.target.value)}\n// \t\t\t/>\n// \t\t\t<div>\n// \t\t\t\t<button onClick={handle}>Done</button>\n// \t\t\t</div>\n// \t\t\t{localStorage.getItem(\"Name\") && (\n// \t\t\t\t<div>\n// \t\t\t\t\tName: <p>{localStorage.getItem(\"Name\")}</p>\n// \t\t\t\t</div>\n// \t\t\t)}\n// \t\t\t{localStorage.getItem(\"Password\") && (\n// \t\t\t\t<div>\n// \t\t\t\t\tPassword: <p>{localStorage.getItem(\"Password\")}</p>\n// \t\t\t\t</div>\n// \t\t\t)}\n// \t\t\t<div>\n// \t\t\t\t<button onClick={remove}>Remove</button>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// };\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n","C:\\Users\\HP\\Desktop\\Comment-app\\Commentwidget\\src\\App.js",[],"C:\\Users\\HP\\Desktop\\Comment-app\\Commentwidget\\src\\comments\\Comments.js",["29"],"C:\\Users\\HP\\Desktop\\Comment-app\\Commentwidget\\src\\api.js",[],"C:\\Users\\HP\\Desktop\\Comment-app\\Commentwidget\\src\\comments\\Comment.js",["30","31"],"import CommentForm from \"./CommentForm\";\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@material-ui/core/\";\nimport ThumbUpAltIcon from \"@material-ui/icons/ThumbUpAlt\";\nimport ThumbDownAltIcon from \"@material-ui/icons/ThumbDownAlt\";\n\nconst Comment = ({\n\tid,\n\tapilike,\n\tapidislike,\n\tcomment,\n\treplies,\n\tsetActiveComment,\n\tactiveComment,\n\tupdateComment,\n\tdeleteComment,\n\taddComment,\n\tparentId = null,\n\tcurrentUserId,\n\tcommentState\n}) => {\n\tconst [reaction, setReaction] = useState({\n\t\tlike: apilike,\n\t\tdislike: apidislike\n\t});\n\tconsole.log(typeof apilike, apidislike);\n\tconst isEditing =\n\t\tactiveComment &&\n\t\tactiveComment.id === comment.id &&\n\t\tactiveComment.type === \"editing\";\n\tconst isReplying =\n\t\tactiveComment &&\n\t\tactiveComment.id === comment.id &&\n\t\tactiveComment.type === \"replying\";\n\tconst fiveMinutes = 300000;\n\tconst timePassed = new Date() - new Date(comment.createdAt) > fiveMinutes;\n\tconst canDelete =\n\t\tcurrentUserId === comment.userId && replies.length === 0 && !timePassed;\n\tconst canReply = Boolean(currentUserId);\n\tconst canEdit = currentUserId === comment.userId && !timePassed;\n\tconst replyId = parentId ? parentId : comment.id;\n\tconst createdAt = new Date(comment.createdAt).toLocaleDateString();\n\treturn (\n\t\t<div key={comment.id} className='comment'>\n\t\t\t<div className='comment-image-container'>\n\t\t\t\t<img width='40' src='/shashank.jpg' />\n\t\t\t</div>\n\t\t\t<div className='comment-right-part'>\n\t\t\t\t<div className='comment-content'>\n\t\t\t\t\t<div className='comment-author'>{comment.username}</div>\n\t\t\t\t\t<div>{createdAt}</div>\n\t\t\t\t</div>\n\t\t\t\t{!isEditing && <div className='comment-text'>{comment.body}</div>}\n\t\t\t\t{isEditing && (\n\t\t\t\t\t<CommentForm\n\t\t\t\t\t\tsubmitLabel='Update'\n\t\t\t\t\t\thasCancelButton\n\t\t\t\t\t\tinitialText={comment.body}\n\t\t\t\t\t\thandleSubmit={(text) => updateComment(text, comment.id)}\n\t\t\t\t\t\thandleCancel={() => {\n\t\t\t\t\t\t\tsetActiveComment(null);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t<Button\n\t\t\t\t\tsize='small'\n\t\t\t\t\tcolor='primary'\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetReaction((prevstate) => ({\n\t\t\t\t\t\t\t...prevstate,\n\t\t\t\t\t\t\tlike: prevstate.like + 1\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tconsole.log(reaction);\n\t\t\t\t\t\tcommentState.like += 1;\n\t\t\t\t\t}}>\n\t\t\t\t\t<ThumbUpAltIcon fontSize='small' /> Like {reaction.like}{\" \"}\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tsize='small'\n\t\t\t\t\tcolor='primary'\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetReaction((prevstate) => ({\n\t\t\t\t\t\t\t...prevstate,\n\t\t\t\t\t\t\tdislike: prevstate.dislike + 1\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tcommentState.dislike += 1;\n\t\t\t\t\t}}>\n\t\t\t\t\t<ThumbDownAltIcon fontSize='small' /> DisLike {reaction.dislike}{\" \"}\n\t\t\t\t</Button>\n\t\t\t\t<div className='comment-actions'>\n\t\t\t\t\t{canReply && (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName='comment-action'\n\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\tsetActiveComment({ id: comment.id, type: \"replying\" })\n\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\tReply\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{canEdit && (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName='comment-action'\n\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\tsetActiveComment({ id: comment.id, type: \"editing\" })\n\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\tEdit\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{canDelete && (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName='comment-action'\n\t\t\t\t\t\t\tonClick={() => deleteComment(comment.id)}>\n\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t{isReplying && (\n\t\t\t\t\t<CommentForm\n\t\t\t\t\t\tsubmitLabel='Reply'\n\t\t\t\t\t\thandleSubmit={(text) => addComment(text, replyId)}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{replies.length > 0 && (\n\t\t\t\t\t<div className='replies'>\n\t\t\t\t\t\t{replies.map((reply) => (\n\t\t\t\t\t\t\t<Comment\n\t\t\t\t\t\t\t\tcomment={reply}\n\t\t\t\t\t\t\t\tkey={reply.id}\n\t\t\t\t\t\t\t\tapilike={parseInt(reply.like)}\n\t\t\t\t\t\t\t\tapidislike={parseInt(reply.dislike)}\n\t\t\t\t\t\t\t\tsetActiveComment={setActiveComment}\n\t\t\t\t\t\t\t\tactiveComment={activeComment}\n\t\t\t\t\t\t\t\tupdateComment={updateComment}\n\t\t\t\t\t\t\t\tdeleteComment={deleteComment}\n\t\t\t\t\t\t\t\taddComment={addComment}\n\t\t\t\t\t\t\t\tparentId={comment.id}\n\t\t\t\t\t\t\t\treplies={[]}\n\t\t\t\t\t\t\t\tcurrentUserId={currentUserId}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Comment;\n","C:\\Users\\HP\\Desktop\\Comment-app\\Commentwidget\\src\\comments\\CommentForm.js",[],{"ruleId":"32","severity":1,"message":"33","line":5,"column":10,"nodeType":"34","messageId":"35","endLine":5,"endColumn":18},{"ruleId":"32","severity":1,"message":"36","line":9,"column":17,"nodeType":"34","messageId":"35","endLine":9,"endColumn":31},{"ruleId":"32","severity":1,"message":"37","line":2,"column":20,"nodeType":"34","messageId":"35","endLine":2,"endColumn":29},{"ruleId":"38","severity":1,"message":"39","line":46,"column":5,"nodeType":"40","endLine":46,"endColumn":43},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'getCommentsApi' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]